theory SecondModel
begin

builtins: hashing, asymmetric-encryption, signing
functions: f/2

rule Register_pk_A:
	[ Fr(~ltk_A), Fr(~sig_1),Fr(~secret)]
	--[Reg($A, ~ltk_A) ]->

	[ !Ltk($A, ~ltk_A), !Pk($A, pk(~ltk_A)), Tr(h(<$A,$mo,sign(<$A,$mo>,~ltk_A)>), $A, $mo, sign(<$A,$mo>,~ltk_A)), Out(h(~secret)), Secret($A, ~secret), Check($A,~secret),
	Out(h(<$A,$mo,sign(<$A,$mo>,~ltk_A)>)), Out($A), Out($mo), Out(sign(<h(<$A,$mo,sign(<$A,$mo>,~ltk_A)>),$mo>,~ltk_A)) ]

restriction unique:
	"All P key1 key2 #i #j. Reg(P,key1) @#i & Reg(P, key2) @#j ==> #i = #j"

rule Reveal_ltk_A:
  [!Ltk(A, ltk_A)]--[Reveal(A)]-> [Out(ltk_A)]

/*
rule PutMoney_A:
	[!Ltk(A, ltk_A), Tr(hash_tr, A, mo, sig_1)]
	--[Eq(sig_1, sign(<A,mo>,ltk_A)), Eq(hash_tr,h(<A,mo,sign(<A,mo>,ltk_A)>))]->
	[ Out(hash_tr),Out(h(<A, mo, sign(< hash_tr, mo >, ltk_A)>)), Out(mo), Out(sign(<hash_tr,mo>,ltk_A)),
	Tr(hash_tr, A, mo, sig_1),]

	Removed from request Interface Eq(verify(signature, <hash_tr, value>, pk_A),true),
*/

rule ReqeustInterface1:
	[In(hash_tr),In(output),In(mo),In(signature),!Ltk(A, ltk_A), !Pk(A,pk_A), Tr(hash_tr, A, mo, sig_1)]
	--[Requested(A, hash_tr),Eq(output, h(<A,mo,signature>)), Eq(hash_tr,h(<A,mo,sign(<A,mo>,ltk_A)>)) ]->
	[Request_Tr(hash_tr, output, mo, signature),Tr(hash_tr, A, mo, sig_1)]

restriction unique2:
	" All P hash_tr1 hash_tr2 #i #j. Requested(P, hash_tr1) @#i & Requested(P, hash_tr2) @#j ==> #i = #j "

rule Miner_1:
	[
	 !Pk(A, pk_A),
	 Tr(hash_tr, A, value, sig_1),
	 Request_Tr(hash_tr, output, value, signature)
	]
	--[ UpdateBlock('PutMoney_a'), Eq(verify(signature, <hash_tr,value>, pk_A),true),Mine(A,hash_tr)]->
	
	[Tr(output,A,value,signature), Out(<output,A,value,signature>)]

rule compute:
	[ !Ltk(A,ltk_A),!Ltk(B,ltk_B), Tr(tr1,A,mo,sig1), Tr(tr2, B, mo, sig2), Fr(~rand)] 
	--[Compute_exec(A,B,mo), Eq(tr1,h(<A,mo,sig1>)), Eq(tr2,h(<B,mo,sig2>))]->
	[Request_Tr(<tr1,tr2>,h(< <A,B>,f(mo,mo), <sign(<<tr1,tr2>,f(mo,mo)>,ltk_A), sign(<<tr1,tr2>,f(mo,mo)>,ltk_B)>>), f(mo,mo),<sign(<<tr1,tr2>,f(mo,mo)>,ltk_A),sign(<<tr1,tr2>,f(mo,mo)>,ltk_B)>), Tr(tr1,A,mo  ,sig1), Tr(tr2,B,mo,sig2)]

/*
rule RequestInterface2:
	[]
	--[]->
	[]
*/

//How to incorportate hash values inside reqeust and transcaction updated on network.

rule Miner_3:
	[Tr(tr1,A,mo,sig_1), Tr(tr2,B,mo,sig_2),
	Request_Tr(<tr1,tr2>, h(<<A,B>, value, signature>), value, signature),
	!Pk(A,pk_A), !Pk(B,pk_B)]

	--[Mine_3(A,B,mo), Eq(verify(fst(signature), <<tr1,tr2>,value>,pk_A),true), Eq(verify(snd(signature),<<tr1,tr2>,value>,pk_B),true), Eq(f(mo,mo),value), Eq(tr1,h(<A,mo,sig_1>)), Eq(tr2,h(<B,mo,sig_2>))]->

	[Tr(h(<A,B>,value,signature),<A,B>,value,signature)]


rule reveal_secret:
	[Secret(A, secret)] --[]-> [Out(secret)]

rule Redeem_A:
	[Tr(output, <A,B>, value, signature),!Ltk(A, ltk_A),In(secret2) ,In(secret),Check(A, secret), Check(B, secret2)] --[Winner(A,ltk_A,B)]-> [Tr(output, A, value, signature)]


rule Redeem_B:
	[Tr(output, <A,B>, value, signature), !Ltk(B, ltk_B), In(secret2) ,In(secret), Check(A, secret), Check(B, secret2)] --[Winner(B,ltk_B,A)]-> [Tr(output, B, value, signature)] 

restriction Live_1:
  "All A B mo #i. Compute_exec(A,B,mo) @i ==> Ex #j. Mine_3(A,B,mo) @j"

restriction Equality: 
  "All x y #i. Eq(x,y) @i ==> x = y"

restriction Live_2:
	"All A B mo #i. Mine_3(A,B,mo) @i ==> (Ex #j ltk_A. Winner(A,ltk_A,B) @j)|(Ex #k ltk_B. Winner(B,ltk_B,A) @k)"

lemma liveness:
	"
		All A B mo #i. 
		Compute_exec(A,B,mo) @i ==> (Ex #j ltk_A. Winner(A,ltk_A,B) @j)	
	"

lemma atmost_one:
	"
	All A B ltk_A ltk_B #i #j. Winner(A,ltk_A,B) @i  & Winner(B,ltk_B,A) @j  ==> (A=B)
	"

lemma lemma_2:
	exists-trace
	"
		Ex A B ltk #i.
		Winner(A,ltk,B) @i
		& not (Ex B #j. Reveal(B) @j)
	"
	
lemma lemma_1:
	exists-trace
	"
		Ex A B  mo hash_tr #i #j #k #m.
			Requested(A,hash_tr) @ i &
			Mine(A,hash_tr) @ j &
			Compute_exec(A,B,mo) @k & 
			Mine_3(A,B,mo) @m
	"
end

// Need to declare facts for starting transactions.
// Can be modeled as rules using concept of state.
// Or we can add starting transcation fact input.
