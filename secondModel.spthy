theory SecondModel
begin

builtins: hashing, asymmetric-encryption, signing
functions: f/2

// Write rules only for one party.
// Use of public variable using $.
// Use hash instead of transaction number.
// Run it atleast. to check what's up.

rule Register_pk_A:
	[ Fr(~ltk_A), Fr(~sig_1),Fr(~secret)]
	--[Reg($A, ~ltk_A) ]->

	[ !Ltk($A, ~ltk_A), !Pk($A, pk(~ltk_A)), Tr(h(<$A,$mo,sign(<$A,$mo>,~ltk_A)>), $A, $mo, sign(<$A,$mo>,~ltk_A)), Out(h(~secret)), Secret($A, ~secret),
	Out(h(<$A,$mo,sign(<$A,$mo>,~ltk_A)>)), Out($A), Out($mo), Out(sign(<h(<$A,$mo,sign(<$A,$mo>,~ltk_A)>),$mo>,~ltk_A)) ]

restriction unique:
	"All P key1 key2 #i #j. Reg(P,key1) @#i & Reg(P, key2) @#j ==> #i = #j"

rule Reveal_ltk_A:
  	[!Ltk(A, ltk_A)]--[Reveal(A)]-> [Out(ltk_A)]

/*
rule PutMoney_A:
	[!Ltk(A, ltk_A), Tr(hash_tr, A, mo, sig_1)]
	--[Eq(sig_1, sign(<A,mo>,ltk_A)), Eq(hash_tr,h(<A,mo,sign(<A,mo>,ltk_A)>))]->
	[ Out(hash_tr),Out(h(<A, mo, sign(< hash_tr, mo >, ltk_A)>)), Out(mo), Out(sign(<hash_tr,mo>,ltk_A)),
	Tr(hash_tr, A, mo, sig_1),]

	Removed from request Interface Eq(verify(signature, <hash_tr, value>, pk_A),true),
*/

rule ReqeustInterface1:
	[In(hash_tr),In(output),In(mo),In(signature),!Ltk(A, ltk_A), !Pk(A,pk_A), Tr(hash_tr, A, mo, sig_1)]
	--[Requested(A, hash_tr),Eq(output, h(<A,mo,signature>)), Eq(hash_tr,h(<A,mo,sign(<A,mo>,ltk_A)>)) ]->
	[Request_Tr(hash_tr, output, mo, signature),Tr(hash_tr, A, mo, sig_1)]

restriction unique2:
	" All P hash_tr1 hash_tr2 #i #j. Requested(P,hash_tr1) @#i & Requested(P,hash_tr2) @#j ==> #i = #j "


rule Miner_1:
	[
	 !Pk(A, pk_A),
	 Tr(hash_tr, A, value, sig_1),
	 Request_Tr(hash_tr, output, value, signature)
	]
	--[ UpdateBlock('PutMoney_a'), Eq(verify(signature, <hash_tr,value>, pk_A),true),Mine(A,hash_tr)]->
	
	[Tr(output,A,value,signature), Out(<output,A,value,signature>)]


rule compute:
	[ !Ltk(A,ltk_A),!Ltk(B,ltk_B), Tr(tr1,A,mo,sig1), Tr(tr2, B, mo, sig2), Fr(~rand)] 
	--[Compute_Aexec(A,~rand),Compute_Bexec(B,ltk_B),Eq(tr1,h(<A,mo,sig1>)), Eq(tr2,h(<B,mo,sig2>))]->
	[Request_Tr(<tr1,tr2>,h(< <A,B>,f(mo,mo), <sign(<<tr1,tr2>,f(mo,mo)>,ltk_A), sign(<<tr1,tr2>,f(mo,mo)>,ltk_B)>>), f(mo,mo),<sign(<<tr1,tr2>,f(mo,mo)>,ltk_A),sign(<<tr1,tr2>,f(mo,mo)>,ltk_B)>), Tr(tr1,A,mo,sig1), Tr(tr2,B,mo,sig2)]

/*
rule RequestInterface2:
	[]
	--[]->
	[]
*/

//How to incorportate hash values inside reqeust and transcaction updated on network.

rule Miner_3:
	[Tr(tr1,A,mo,sig_1), Tr(tr2,B,mo,sig_2),
	Request_Tr(<tr1,tr2>, h(<<A,B>, value, signature>), value, signature),
	!Pk(A,pk_A), !Pk(B,pk_B)]

	--[Mine_3(h(<A,B>,value,signature)), Eq(verify(fst(signature), <<tr1,tr2>,value>,pk_A),true), Eq(verify(snd(signature),<<tr1,tr2>,value>,pk_B),true), Eq(f(mo,mo),value), Eq(tr1,h(<A,mo,sig_1>)), Eq(tr2,h(<B,mo,sig_2>))]->

	[Tr(h(<A,B>,value,signature),<A,B>,value,signature)]


restriction Equality: 
"All x y #i. Eq(x,y) @i ==> x = y"

rule reveal_secret:
	[Secret(A, secret)] --[]-> [Out(secret)]

rule Redeem_A:
	[Tr(output, <A,B>, value, signature),!Ltk(A,ltk_A), Secret(A,secret), Secret(B,secret2)] --[Winner(A,ltk_A,B)]-> [Tr(output, A, value,signature)]

rule Redeem_B:
	[Tr(output, <A,B>, value, signature), !Ltk(B,ltk_B),Secret(A, secret), Secret(B,secret2)] --[Winner(B,ltk_B,A)]-> [Tr(output, B, value, signature)]

/*
lemma lemma_3:
	"
		Ex A ltk #i.
		Winner(A,ltk) @i
		==>
		(Ex B rand #j. Compute_Aexec(A,rand) @j)
	"
*/

lemma atmost_one:
	"
		not ( Ex A B ltk_A ltk_B #i #j. Winner(A,ltk_A,B) @i  & Winner(B,ltk_B,A) @j )
	"
lemma lemma_2:
	exists-trace
	"
		Ex A B ltk #i.
		Winner(A,ltk,B) @i
		& not (Ex B #j. Reveal(B) @j)
	"

lemma lemma_1:
	exists-trace
	"
		Ex A B hash_tr rand rand2 rand3 #i #j #k #l #m.
			Requested(A,hash_tr) @ i &
			Mine(A,hash_tr) @ j &
			Compute_Aexec(A,rand) @ k &
			Compute_Bexec(B,rand2) @l &
			Mine_3(rand3) @m
	"
end

/*

rule reveal_sa:
	[Done_withCompute_A(),Fr(~sa)] --[]->  [Out(~sa)]

rule reveal_sa:
	[Done_withCompute_B(),Fr(~sb)] --[]->  [Out(~sb)]

rule Claim_A:
	[In(sa),In(smo), !Ltk($A,ltk_A)]
	--[]->
	[Request_Tr('Compute1','ClaimMoneyA',2*mo, <sign(<'Compute1',2*mo>,ltk_A),sa,smo>)]

rule Claim_B:
	[In(sa),In(smo), !Ltk($B,ltk_B)]
	--[]->
	[Request_Tr('Compute1','ClaimMoneyB',2*m, <sign(<'Compute1',2*m>,ltk_B),sa,sb>)]

rule Miner_4:
	[!Pk($A,pk_A),Request_Tr(input,output,value, signature)]
	--[Eq(sa,sb),Eq(verify(signature,<input,value>,pk_A),true)]->
	[Tr('ClaimMoneyA',A,2*m,signature)]

rule Miner_5:
	[!Pk($A,pk_B),Request_Tr(input,output,value, signature)]
	--[NEq(sa,sm),Eq(verify(signature,<input,value>,pk_B),true)]->
	[Tr('ClaimMoneyB',B,2*m,signature)]
*/

// Need to declare facts for starting transactions.
// Can be modeled as rules using concept of state.
// Or we can add starting transcation fact input